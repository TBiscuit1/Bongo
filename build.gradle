import org.apache.maven.artifact.versioning.ComparableVersion

import java.nio.file.Files
import java.nio.file.Paths

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath group: 'org.apache.maven', name: 'maven-artifact', version: '3.6.3+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

group = 'io.github.noeppi_noeppi.mods'
archivesBaseName = 'Bongo'
version = '1.16.3-1.0.1-spooky2' //getVersion(group, archivesBaseName, "${minecraft_version}-${mod_version}")

println "${archivesBaseName} version: ${version}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'snapshot', version: '20200916-1.16.2'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            jvmArg "-Dmixin.env.disableRefMap=true"
            mods {
                bongo {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            jvmArg "-Dmixin.env.disableRefMap=true"
            mods {
                bongo {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'bongo', '--all', '--output', file('src/generated/resources/'), "--existing", file("src/main/resources")
            jvmArg "-Dmixin.env.disableRefMap=true"
            mods {
                bongo {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        // location of the maven that hosts JEI files
        name "Progwml6 maven"
        url "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name "ModMaven"
        url "https://modmaven.k-4u.nl"
    }
    maven {
        name = 'MelanX Maven'
        url = 'https://maven.melanx.de/'
    }
    repositories {
        maven {
            name = "CurseMaven"
            url = "https://www.cursemaven.com"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compile fg.deobf("io.github.noeppi_noeppi.mods:LibX:${minecraft_version}-${libx_version}")

    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

    compile fg.deobf('curse.maven:pumpkin-spice-everything:3097389')
    compile fg.deobf('curse.maven:corrupted-land:3089518')
    compile fg.deobf('curse.maven:immortuos-calyx:3083680')
    compile fg.deobf('curse.maven:spooky-arms:3097847')
    compile fg.deobf('curse.maven:froglins:3085866')
    compile fg.deobf('curse.maven:mystical-pumpkins:3098387')
    compile fg.deobf('curse.maven:pumpkinpotions:3097852')
    compile fg.deobf('curse.maven:spooky-autumn-forests:3094599')
    compile fg.deobf('curse.maven:paranoia:3088671')
    compile fg.deobf('curse.maven:lorespawn:3096584')
    compile fg.deobf('curse.maven:undercoverwitches:3098759')
    compile fg.deobf('curse.maven:cucurbita:3097930')
    compile fg.deobf('curse.maven:geckolib:3071704')
}

jar {
    manifest {
        attributes([
            "Specification-Title": "bongo",
            "Specification-Vendor": "noeppi_noeppi",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"noeppi_noeppi",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    /*publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.archivesBaseName
            version = project.version

            artifact jar

            pom {
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url "/var/www/maven"
        }
    }*/
}

private static String getVersion(String group, String artifact, String baseVersion) {
    java.nio.file.Path mavenPath = Paths.get('/var/www/maven').resolve(group.replace('.', '/')).resolve(artifact)
    if (!Files.isDirectory(mavenPath)) {
        return "${baseVersion}.0"
    }
    return "${baseVersion}." + Files.walk(mavenPath)
            .filter{path -> Files.isRegularFile(path) && path.getFileName().toString().endsWith('.pom')}
            .map{path ->
                String fileName = path.getFileName().toString()
                fileName.substring(fileName.indexOf('-', artifact.size()) + 1, fileName.length() - 4)
            }.filter{version -> version.startsWith(baseVersion)}
            .max{s1, s2 -> new ComparableVersion(s1).compareTo(new ComparableVersion(s2))}
            .map{ver -> ver.substring(ver.findLastIndexOf{ str -> !"0123456789".contains(str) } + 1)}
            .map{ver -> ver.isEmpty() ? "-1" : ver }
            .map{ver -> (ver.toInteger() + 1).toString()}
            .orElse("0")
}